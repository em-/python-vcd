#!/usr/bin/python

import sys
import cairo
import re
from optparse import OptionParser
from vcd.vcd import Vcd

parser = OptionParser()
parser.usage = "%prog [OPTIONS] INPUT OUTPUT"
parser.add_option("-m", "--module", action="store", type="string",
                  dest="module",
                  help="display only signals in the module scope")
parser.add_option("-X", "--exclude", action="store", type="string",
                  dest="exclude",
                  help="do not display signals which match the regex")
(options, args) = parser.parse_args()
if len(args) < 2:
    parser.error("not enough argument")

input = args[0]
output = args[1]

v = Vcd(input)

if options.module:
    signals = [s for s in v.signals if s.module == options.module]
else:
    signals = v.signals

if options.exclude:
    exclude = re.compile(options.exclude)
    signals = [s for s in signals if not exclude.match(s.reference)]

if not signals:
    print "error: no usable signal found"
    sys.exit(1)

text_color           = (0, 0, 0)
default_fill_color   = (0.8, 1, 0.8)
default_stroke_color = (0.5, 1, 0.5)
unknown_fill_color   = (1, 0.8, 0.8)
unknown_stroke_color = (1, 0.5, 0.5)

total = 0
for signal in signals:
    total = max([total] + [int(s[0]) for s in signal.steps])

line_heigth = 30
signal_heigth = 15

WIDTH = 600
HEIGHT = line_heigth * (len(signals) + 1)

text_font_size = 15
text_length = 150

signal_time_coeff = total / (WIDTH - text_length)

def process_steps(steps, total):
    result = []
    for i in range(len(steps)-1):
        value = steps[i][1]
        duration = float(steps[i+1][0]) - int(steps[i][0])
        duration /= signal_time_coeff
        result.append((value, duration))

    value = steps[-1][1]
    duration = total - float(steps[-1][0])
    duration /= signal_time_coeff
    result.append((value, duration))
    return result


def draw_steps_single(ctx, signal, total):
    now  = 0
    ctx.move_to(0,0)
    for value, duration in process_steps(signal.steps, total):
        if value in ('0', '1'):
            ctx.set_source_rgb (*default_stroke_color)
            ctx.line_to(now, -signal_heigth*int(value))
            ctx.rel_line_to(duration, 0)
        else:
            ctx.stroke()
            ctx.set_source_rgb (*unknown_fill_color)
            x, y = ctx.get_current_point()
            ctx.rectangle(x, 0, duration, -signal_heigth)
            ctx.fill()
            ctx.set_source_rgb (*unknown_stroke_color)
            ctx.move_to(x, -signal_heigth)
            ctx.rel_line_to(duration, 0)
            ctx.move_to(x, 0)
            ctx.rel_line_to(duration, 0)
            ctx.stroke()
        now += duration
    ctx.stroke()

def draw_steps_register(ctx, signal, total):
    def paint(ctx):
        if 'U' in value:
            ctx.set_source_rgb (*unknown_fill_color)
            ctx.fill_preserve()
            ctx.set_source_rgb (*unknown_stroke_color)
            ctx.stroke()
        else:
            ctx.set_source_rgb (*default_fill_color)
            ctx.fill_preserve()
            ctx.set_source_rgb (*default_stroke_color)
            ctx.stroke()
    ctx.set_font_size(text_font_size/2)
    ctx.move_to(0, -signal_heigth/2)
    steps = process_steps(signal.steps, total)
    for value, duration in steps[:-1]:
        x, y = ctx.get_current_point()
        offset = min(signal_heigth/4, duration/2)
        ctx.line_to(x+offset, -signal_heigth)
        ctx.line_to(x+duration-offset, -signal_heigth)
        ctx.line_to(x+duration, -signal_heigth/2)
        ctx.line_to(x+duration-offset, 0)
        ctx.line_to(x+offset, 0)
        ctx.close_path()
        paint(ctx)
        ctx.move_to(x+offset, -line_heigth/9)
        ctx.text_path(value[1:])
        ctx.set_source_rgb (*text_color)
        ctx.fill()
        ctx.move_to(x+duration, -signal_heigth/2)
    value, duration = steps[-1]
    x, y = ctx.get_current_point()
    offset = min(signal_heigth/4, duration/2)
    ctx.move_to(x+duration, 0)
    ctx.line_to(x+offset, 0)
    ctx.line_to(x, -signal_heigth/2)
    ctx.line_to(x+offset, -signal_heigth)
    ctx.line_to(x+duration, -signal_heigth)
    paint(ctx)
    ctx.move_to(x+offset, -line_heigth/9)
    ctx.text_path(value[1:])
    ctx.set_source_rgb (*text_color)
    ctx.fill()

def draw_grid(ctx, signals, total):
    ctx.translate(text_length, 0)
    ctx.set_font_size(text_font_size/2)
    ctx.set_line_width(0.1)
    interval = 1000000.0/signal_time_coeff

    for i in range(total/1000000 + 1):
        ctx.move_to(i * interval, line_heigth/9)
        ctx.text_path("%d ns" % i)
        ctx.fill()
        ctx.move_to(i * interval, 2*line_heigth/9)
        ctx.rel_line_to(0, 2*line_heigth/9 +line_heigth * len(signals))
        ctx.set_dash([4, 3], 1)
        ctx.stroke()
        ctx.set_dash([], 0)

    for i in range(5*total/1000000 +1):
        ctx.move_to(i * interval/5, 2*line_heigth/9)
        ctx.rel_line_to(0, 2*line_heigth/9)
        ctx.stroke()

    ctx.move_to(0, 2*line_heigth/9)
    ctx.rel_line_to(total/signal_time_coeff, 0)
    ctx.stroke()


surface = cairo.PSSurface (output, WIDTH, HEIGHT)
ctx = cairo.Context(surface)

ctx.set_source_rgb (1, 1, 1)
ctx.set_operator (cairo.OPERATOR_SOURCE)
ctx.paint()

ctx.set_source_rgb (*text_color)

ctx.translate(0, line_heigth/3)
ctx.save()
draw_grid(ctx, signals, total)
ctx.restore()


ctx.translate(0, line_heigth)
ctx.save()
for signal in signals:
    ctx.set_font_size(text_font_size)
    ctx.new_path()
    ctx.text_path(signal.reference)
    ctx.fill()
    ctx.translate(0, line_heigth)

ctx.restore()

for signal in signals:
    ctx.save()
    ctx.translate(text_length, 0)
    if signal.size == 1:
        draw_steps_single(ctx, signal, total)
    else:
        draw_steps_register(ctx, signal, total)
    ctx.restore()
    ctx.translate(0, line_heigth)
